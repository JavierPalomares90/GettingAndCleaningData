x <- 1:10
if (x>5)
end
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f(3)
z
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x = numeric()
x = makeVector()
source('~/Dropbox/RProgramming/makeVector.R')
source('~/Dropbox/RProgramming/cachemean.R')
x = makeVector()
x
x = c(2,3,4)
x
x = makeVector(x)
x
x.get
source('~/Dropbox/RProgramming/makeVector.R')
source('~/Dropbox/RProgramming/makeVector.R')
source('~/Dropbox/RProgramming/makeVector.R')
source('~/Dropbox/RProgramming/makeVector.R')
source('~/Dropbox/RProgramming/makeVector.R')
source('~/Dropbox/RProgramming/makeVector.R')
source('~/Dropbox/RProgramming/cachemean.R')
library(datasets)
data(iris)
?iris
Sepal.Length
iris.Sepal.Length
iris
iris[,2]
x <- iris[,5]
x
x[[1]]
x[[1]] =='setosa'
x <- iris[...,Species=='virginica']
x <- iris[,,,Species=='virginica']
x <- iris[,,,,Species=='virginica']
x <- iris[],Species=='virginica']
x <- iris[,Species=='virginica']
x <- iris[,Species='virginica']
x <- iris[,,,,Species='virginica']
x <- iris[,,,Species='virginica']
x <- iris[101:150,]
x
iris
x
y = x[1,2]
y
y = x[,2]
y
y = x[,1]
y
mean(y)
colMeans(iris)
irirs
iris
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429 -2.63636
209.21429 -82.63636
debug(ls)
ls
ls
clear
clc
ls
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z,555,c)
c(z,555,z)
z * 2 + 100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div = z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
z * 2 + 1000
my_div
0
ls
ls
library(swirl)
swirl()
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times =
| 40)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10).
rep(c(0, 1, 2), each = 10)
num_vect<-c(.5,55,-10,6)
tf <- num_vect <1
tf
num_vect>-6
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char, collapse = " ")
c(my_char,"Javier")
my_name<-c(my_char,"Javier")
my_name
paste(my_name," ")
paste(my_name,collapse=" ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na = is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
Call the sum(my_na)
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf
| = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vec)
names(vect)
vect2<-c(11, 2, NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(4,5)
my_matrix2<-matrix(4,5,byrow=TRUE)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
?names
patients<-c("Bill"."Gina","Kelly","Sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrx)
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
list
ls
lis
ls()
class(plants)
plants
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
set.seed(1)
rpois(5, 2)
?dpois
?qpois
?rpois
?ppois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
?rpois
?Rprof
x1<-0
x2<-1
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y<-1
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?lm
install.packages("RMySQL")
library(RMySQL)
u<-dbConnect(MySQL(),user="genome",host = "genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(u,"show databases;");dbDisconnect(u)
result
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","bar")
created = h5createGroup("example.h5","foo/fooba")
source('~/Dropbox/GettingAndCleaningData/run_analysis.R')
source('~/Dropbox/GettingAndCleaningData/run_analysis.R')
}
write.table(result, "data_with_means.txt") # write out the 2nd dataset
source('~/Dropbox/GettingAndCleaningData/run_analysis.R')
bool2 <- activity[j, 2] == cleanedData$activity
result[row, 3:columnLen] <- colMeans(cleanedData[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
head(result)
colnames(result) <- colnames(cleanedData)
row <- 1
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
result[row, 1] <- sort(unique(joinSubject)[, 1])[i]
result[row, 2] <- activity[j, 2]
bool1 <- i == cleanedData$subject
bool2 <- activity[j, 2] == cleanedData$activity
result[row, 3:columnLen] <- colMeans(cleanedData[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
head(result)
write.table(result,"data_with_means.txt",row.name=FALSE) # write out the 2nd dataset
source('~/Dropbox/GettingAndCleaningData/run_analysis.R')
